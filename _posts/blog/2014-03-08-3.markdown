---
layout    : post
title     : "LeetCode:valuate Reverse Polish Notation"
date      : 2014-03-08

categories:
- blog
---

![题目描述](/images/blog3/1.jpg "题目描述")

###算法思想
这道题是笔者做leetcode的第一题，题目一目了然是对一个后缀表达式求值。算法思想也比较简单，利用一个栈数据结构就可以了：如果当前字符串为一个操作符则从栈中弹出两个操作数进行运算后将结果入栈；否则则当前字符串为一个操作数，直接入栈即可。时间复杂度也很清晰，为O(n)。

###Java实现
实现过程需要注意操作数的弹出顺序应为压入的逆序。代码如下。


{% highlight java linenos%}
public static int evalRPN(String[] tokens){
	if(tokens==null)
		return 0;
	Stack<String> tokenStack = new Stack<String>();
	for(int i=0;i<tokens.length;i++){
		if(tokens[i].equals("+")){
			int a=Integer.parseInt(tokenStack.pop());
			int b=Integer.parseInt(tokenStack.pop());
			tokenStack.push(""+(b+a));
		}
		else if(tokens[i].equals("-")){
			int a=Integer.parseInt(tokenStack.pop());
			int b=Integer.parseInt(tokenStack.pop());
			tokenStack.push(""+(b-a));
		}
		else if(tokens[i].equals("*")){
			int a=Integer.parseInt(tokenStack.pop());
			int b=Integer.parseInt(tokenStack.pop());
			tokenStack.push(""+(b*a));
		}
		else if(tokens[i].equals("/")){
			int a=Integer.parseInt(tokenStack.pop());
			int b=Integer.parseInt(tokenStack.pop());
			tokenStack.push(""+(b/a));
		}
		else{
			tokenStack.push(tokens[i]);
		}	
	}
	return Integer.parseInt(tokenStack.pop());
}
{% endhighlight %}